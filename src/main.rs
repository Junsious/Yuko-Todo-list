#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
use eframe::egui;
use serde::{Deserialize, Serialize};
use std::fs;

// –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–∏
const SAVE_FILE: &str = "tasks.json";

#[derive(Default, Serialize, Deserialize)]
struct TodoApp {
    tasks: Vec<Task>,               // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    new_task: String,               // –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    selected_task: Option<usize>,   // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

#[derive(Default, Serialize, Deserialize)]
struct Task {
    description: String, // –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    completed: bool,     // –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
}

impl TodoApp {
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
    fn load_tasks() -> Self {
        if let Ok(data) = fs::read_to_string(SAVE_FILE) {
            if let Ok(app) = serde_json::from_str::<TodoApp>(&data) {
                return app;
            }
        }
        TodoApp::default() // –ï—Å–ª–∏ —á—Ç–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
    fn save_tasks(&self) {
        if let Ok(data) = serde_json::to_string_pretty(self) {
            let _ = fs::write(SAVE_FILE, data); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
        }
    }
}

impl eframe::App for TodoApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        ctx.set_style(egui::Style {
            visuals: egui::Visuals::dark(),
            ..Default::default()
        });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("To-Do List");
            ui.separator();

            // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            ui.horizontal(|ui| {
                ui.add(egui::TextEdit::singleline(&mut self.new_task)
                    .hint_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...")
                    .desired_width(300.0));
                if ui.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É").clicked() {
                    if !self.new_task.is_empty() {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
                        self.tasks.push(Task {
                            description: self.new_task.clone(),
                            completed: false,
                        });
                        self.new_task.clear();
                        self.save_tasks(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    }
                }
            });

            ui.separator();

            // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            egui::ScrollArea::vertical().show(ui, |ui| {
                ui.group(|ui| {
                    ui.label("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:");
                    let mut to_remove = Vec::new();

                    for (i, task) in self.tasks.iter_mut().enumerate() {
                        ui.horizontal(|ui| {
                            ui.checkbox(&mut task.completed, "");

                            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞
                            if self.selected_task.map_or(false, |selected| selected == i) {
                                ui.horizontal(|ui| {
                                    ui.label("‚úèÔ∏è");
                                    ui.text_edit_singleline(&mut task.description);
                                });
                            } else {
                                ui.label(&task.description);
                            }

                            // –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            if ui.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å").clicked() {
                                self.selected_task = Some(i);
                            }

                            // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
                            if ui.button("üóë").clicked() {
                                to_remove.push(i);
                            }
                        });
                    }

                    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    for index in to_remove.iter().rev() {
                        self.tasks.remove(*index);
                        self.save_tasks(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    }
                });
            });

            // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if self.selected_task.is_some() {
                if ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è").clicked() {
                    self.selected_task = None;
                    self.save_tasks(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                }
            }
        });
    }
}

fn main() {
    let options = eframe::NativeOptions::default();
    let app = TodoApp::load_tasks(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    eframe::run_native(
        "To-Do List",
        options,
        Box::new(|_cc| Ok(Box::new(app))),
    )
    .unwrap();
}
