use eframe::egui;
use serde::{Deserialize, Serialize};
use std::fs;
use chrono::Local;  // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

// –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–∏
const SAVE_FILE: &str = "tasks.json";

#[derive(Default, Serialize, Deserialize)]
struct TodoApp {
    tasks: Vec<Task>,               // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    new_task: String,               // –í–≤–æ–¥ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    selected_task: Option<usize>,   // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è –∑–∞–¥–∞—á–∞
    show_completed: bool,           // –§–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    search_query: String,           // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    theme: Theme,                   // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è)
}

#[derive(Default, Serialize, Deserialize)]
struct Task {
    description: String, // –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    completed: bool,     // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
}

#[derive(Serialize, Deserialize, PartialEq)]
enum Theme {
    Dark,
    Light,
}

impl Default for Theme {
    fn default() -> Self {
        Theme::Dark
    }
}

impl TodoApp {
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
    fn load_tasks() -> Self {
        if let Ok(data) = fs::read_to_string(SAVE_FILE) {
            if let Ok(app) = serde_json::from_str::<TodoApp>(&data) {
                return app;
            }
        }
        TodoApp::default() // –ï—Å–ª–∏ —á—Ç–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
    fn save_tasks(&self) {
        if let Ok(data) = serde_json::to_string_pretty(self) {
            let _ = fs::write(SAVE_FILE, data); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
        }
    }

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    fn completed_tasks(&self) -> usize {
        self.tasks.iter().filter(|task| task.completed).count()
    }

    // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    fn progress(&self) -> f32 {
        if self.tasks.is_empty() {
            0.0
        } else {
            (self.completed_tasks() as f32 / self.tasks.len() as f32) * 100.0
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    fn toggle_theme(&mut self) {
        self.theme = match self.theme {
            Theme::Dark => Theme::Light,
            Theme::Light => Theme::Dark,
        };
        self.save_tasks();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    fn current_time() -> String {
        let now = Local::now();
        now.format("%H:%M:%S").to_string()  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    fn filtered_tasks(&self) -> Vec<(usize, &Task)> {
        self.tasks.iter()
            .enumerate()
            .filter(|(_, task)| {
                task.description
                    .to_lowercase()
                    .contains(&self.search_query.to_lowercase())
            })
            .collect()
    }
}

impl eframe::App for TodoApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ctx.set_style(egui::Style {
            visuals: match self.theme {
                Theme::Dark => egui::Visuals::dark(),
                Theme::Light => egui::Visuals::light(),
            },
            ..Default::default()
        });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("To-Do List");
            ui.separator();

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            ui.with_layout(egui::Layout::right_to_left(egui::Align::TOP), |ui| {
                ui.label(TodoApp::current_time());
            });

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
            if ui.button("Toggle Theme").clicked() {
                self.toggle_theme();
            }

            ui.horizontal(|ui| {
                // –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                let progress = self.progress() / 100.0;
                ui.label(format!("Progress: {:.2}%", self.progress()));
                ui.add(egui::ProgressBar::new(progress)
                    .animate(true)  // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    .desired_width(300.0)
                );
            });

            ui.separator();

            // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            ui.vertical(|ui| {
                ui.add(egui::TextEdit::multiline(&mut self.new_task)
                    .hint_text("Enter a new task...")  // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                    .desired_rows(3)                 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    .desired_width(300.0)            // –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
                );

                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                if ui.button("Add Task").clicked() {
                    if !self.new_task.is_empty() {
                        self.tasks.push(Task {
                            description: self.new_task.clone(),
                            completed: false,
                        });
                        self.new_task.clear();
                        self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    }
                }
            });

            ui.separator();

            // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ui.horizontal(|ui| {
                ui.label("Search:");
                ui.text_edit_singleline(&mut self.search_query);
            });

            // –§–ª–∞–∂–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            ui.checkbox(&mut self.show_completed, "Show Completed Tasks");

            // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            egui::ScrollArea::vertical().show(ui, |ui| {
                let mut to_remove = Vec::new();
                let mut edit_task = None;

                // –ò–Ω–¥–µ–∫—Å—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
                let task_indices: Vec<usize> = self.filtered_tasks()
                    .iter()
                    .filter(|(_, task)| self.show_completed || !task.completed)
                    .map(|(i, _)| *i)
                    .collect();

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
                for i in task_indices {
                    let task = &mut self.tasks[i];
                    ui.horizontal(|ui| {
                        // –ß–µ–∫–±–æ–∫—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                        let checkbox_response = ui.checkbox(&mut task.completed, "");
                        checkbox_response.changed(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                        if self.selected_task.map_or(false, |selected| selected == i) {
                            ui.add(egui::TextEdit::multiline(&mut task.description)
                                .desired_rows(3)
                                .desired_width(300.0),
                            );
                        } else {
                            let style = if task.completed {
                                egui::TextEdit::multiline(&mut task.description)
                                    .interactive(false)
                                    .desired_width(300.0)
                                    .text_color(egui::Color32::from_gray(120))  // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                            } else {
                                egui::TextEdit::multiline(&mut task.description)
                                    .interactive(false)
                                    .desired_width(300.0)
                            };
                            ui.add(style);
                        }

                        // –ö–Ω–æ–ø–∫–∞ "Edit"
                        if ui.button("‚úèÔ∏è").on_hover_text("Edit Task").clicked() {
                            edit_task = Some(i);
                        }

                        // –ö–Ω–æ–ø–∫–∞ "Delete"
                        if ui.button("üóë").on_hover_text("Delete Task").clicked() {
                            to_remove.push(i);
                        }
                    });
                }

                // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
                for index in to_remove.iter().rev() {
                    self.tasks.remove(*index);
                    self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                }

                // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                if let Some(task_index) = edit_task {
                    self.selected_task = Some(task_index);
                }
            });

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if ui.button("Clear Completed").on_hover_text("Remove all completed tasks").clicked() {
                self.tasks.retain(|task| !task.completed);
                self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            }

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if self.selected_task.is_some() {
                if ui.button("Save Changes").on_hover_text("Save task changes").clicked() {
                    self.selected_task = None;
                    self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                }
            }
        });

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        ctx.request_repaint();
    }
}

fn main() {
    let options = eframe::NativeOptions::default();
    let app = TodoApp::load_tasks(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    eframe::run_native(
        "To-Do List",
        options,
        Box::new(|_cc| Ok(Box::new(app))),
    )
    .unwrap();
}
