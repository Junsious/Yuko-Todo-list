use eframe::egui;
use serde::{Deserialize, Serialize};
use std::fs;
use chrono::Local;  // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

// File where tasks will be saved
const SAVE_FILE: &str = "tasks.json";

#[derive(Default, Serialize, Deserialize)]
struct TodoApp {
    tasks: Vec<Task>,               // List of tasks
    new_task: String,               // New task input
    selected_task: Option<usize>,   // Task currently being edited
    show_completed: bool,           // Option to toggle showing completed tasks
    theme: Theme,                   // Light/Dark theme toggle
}

#[derive(Default, Serialize, Deserialize)]
struct Task {
    description: String, // Task description
    completed: bool,     // Task completion status
}

#[derive(Serialize, Deserialize, PartialEq)]
enum Theme {
    Dark,
    Light,
}

impl Default for Theme {
    fn default() -> Self {
        Theme::Dark
    }
}

impl TodoApp {
    // Method for loading tasks from a file
    fn load_tasks() -> Self {
        if let Ok(data) = fs::read_to_string(SAVE_FILE) {
            if let Ok(app) = serde_json::from_str::<TodoApp>(&data) {
                return app;
            }
        }
        TodoApp::default() // If reading fails, return an empty task list
    }

    // Method for saving tasks to a file
    fn save_tasks(&self) {
        if let Ok(data) = serde_json::to_string_pretty(self) {
            let _ = fs::write(SAVE_FILE, data); // Ignore the error when writing
        }
    }

    // Method to count completed tasks
    fn completed_tasks(&self) -> usize {
        self.tasks.iter().filter(|task| task.completed).count()
    }

    // Method to calculate task completion percentage
    fn progress(&self) -> f32 {
        if self.tasks.is_empty() {
            0.0
        } else {
            (self.completed_tasks() as f32 / self.tasks.len() as f32) * 100.0
        }
    }

    // Method to toggle the theme
    fn toggle_theme(&mut self) {
        self.theme = match self.theme {
            Theme::Dark => Theme::Light,
            Theme::Light => Theme::Dark,
        };
        self.save_tasks();
    }

    // Method to get the current time as a formatted string
    fn current_time() -> String {
        let now = Local::now();
        now.format("%H:%M:%S").to_string()  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°
    }
}

impl eframe::App for TodoApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
        ctx.set_style(egui::Style {
            visuals: match self.theme {
                Theme::Dark => egui::Visuals::dark(),
                Theme::Light => egui::Visuals::light(),
            },
            ..Default::default()
        });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("To-Do List");
            ui.separator();

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            ui.with_layout(egui::Layout::right_to_left(egui::Align::TOP), |ui| {
                ui.label(TodoApp::current_time());
            });

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
            if ui.button("Toggle Theme").clicked() {
                self.toggle_theme();
            }

            ui.horizontal(|ui| {
                // –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                let progress = self.progress() / 100.0;
                ui.label(format!("Progress: {:.2}%", self.progress()));
                ui.add(egui::ProgressBar::new(progress)
                    .animate(true)  // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    .desired_width(300.0)
                );
            });

            ui.separator();

            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º –≤–≤–æ–¥–æ–º
            ui.vertical(|ui| {
                ui.add(egui::TextEdit::multiline(&mut self.new_task)
                    .hint_text("Enter a new task...") // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                    .desired_rows(3)                 // –¢—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞
                    .desired_width(300.0)             // –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
                );

                // –ö–Ω–æ–ø–∫–∞ "Add Task" —Ä—è–¥–æ–º —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º –≤–≤–æ–¥–æ–º
                if ui.button("Add Task").clicked() {
                    if !self.new_task.is_empty() {
                        self.tasks.push(Task {
                            description: self.new_task.clone(),
                            completed: false,
                        });
                        self.new_task.clear();
                        self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    }
                }
            });

            ui.separator();

            // –§–ª–∞–∂–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            ui.checkbox(&mut self.show_completed, "Show Completed Tasks");

            // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            egui::ScrollArea::vertical().show(ui, |ui| {
                let mut to_remove = Vec::new();

                for (i, task) in self.tasks.iter_mut().enumerate() {
                    if !self.show_completed && task.completed {
                        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
                    }

                    ui.horizontal(|ui| {
                        // –ß–µ–∫–±–æ–∫—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                        ui.checkbox(&mut task.completed, "");

                        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                        if self.selected_task.map_or(false, |selected| selected == i) {
                            ui.add(egui::TextEdit::multiline(&mut task.description)
                                .desired_rows(3)
                                .desired_width(300.0),
                            );
                        } else {
                            let style = if task.completed {
                                egui::TextEdit::multiline(&mut task.description)
                                    .interactive(false)
                                    .desired_width(300.0)
                                    .text_color(egui::Color32::from_gray(120))  // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                            } else {
                                egui::TextEdit::multiline(&mut task.description)
                                    .interactive(false)
                                    .desired_width(300.0)
                            };
                            ui.add(style);
                        }

                        // –ö–Ω–æ–ø–∫–∞ "Edit"
                        if ui.button("‚úèÔ∏è").on_hover_text("Edit Task").clicked() {
                            self.selected_task = Some(i);
                        }

                        // –ö–Ω–æ–ø–∫–∞ "Delete" —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
                        if ui.button("üóë").on_hover_text("Delete Task").clicked() {
                            to_remove.push(i);
                        }
                    });
                }

                // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
                for index in to_remove.iter().rev() {
                    self.tasks.remove(*index);
                    self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                }
            });

            // –ö–Ω–æ–ø–∫–∞ "Clear Completed"
            if ui.button("Clear Completed").on_hover_text("Remove all completed tasks").clicked() {
                self.tasks.retain(|task| !task.completed);
                self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            }

            // –ö–Ω–æ–ø–∫–∞ "Save Changes" –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if self.selected_task.is_some() {
                if ui.button("Save Changes").on_hover_text("Save task changes").clicked() {
                    self.selected_task = None;
                    self.save_tasks(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                }
            }
        });

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å
        ctx.request_repaint();
    }
}

fn main() {
    let options = eframe::NativeOptions::default();
    let app = TodoApp::load_tasks(); // Load tasks at the start of the application

    eframe::run_native(
        "To-Do List",
        options,
        Box::new(|_cc| Ok(Box::new(app))),
    )
    .unwrap();
}
